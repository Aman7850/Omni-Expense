/// <reference types="react" />
import type { PortalType } from '../types';
import type { ActionTypes } from './types';
export declare const reducer: (base: {
    readonly [x: string]: readonly {
        readonly name: string;
        readonly node: boolean | import("react").ReactText | {
            readonly type: string | import("react").JSXElementConstructor<any>;
            readonly props: any;
            readonly key: import("react").Key | null;
        } | {} | {
            readonly [x: number]: boolean | import("react").ReactText | {
                readonly type: string | import("react").JSXElementConstructor<any>;
                readonly props: any;
                readonly key: import("react").Key | null;
            } | {} | any | {
                readonly key: import("react").Key | null;
                readonly children: boolean | import("react").ReactText | {
                    readonly type: string | import("react").JSXElementConstructor<any>;
                    readonly props: any;
                    readonly key: import("react").Key | null;
                } | {} | any | any | null | undefined;
                readonly type: string | import("react").JSXElementConstructor<any>;
                readonly props: any;
            } | null | undefined;
            readonly length: number;
            readonly toString: () => string;
            readonly toLocaleString: () => string;
            readonly pop: () => import("react").ReactNode;
            readonly push: (...items: import("react").ReactNode[]) => number;
            readonly concat: {
                (...items: ConcatArray<import("react").ReactNode>[]): import("react").ReactNode[];
                (...items: (import("react").ReactNode | ConcatArray<import("react").ReactNode>)[]): import("react").ReactNode[];
            };
            readonly join: (separator?: string | undefined) => string;
            readonly reverse: () => import("react").ReactNode[];
            readonly shift: () => import("react").ReactNode;
            readonly slice: (start?: number | undefined, end?: number | undefined) => import("react").ReactNode[];
            readonly sort: (compareFn?: ((a: import("react").ReactNode, b: import("react").ReactNode) => number) | undefined) => import("react").ReactNodeArray;
            readonly splice: {
                (start: number, deleteCount?: number | undefined): import("react").ReactNode[];
                (start: number, deleteCount: number, ...items: import("react").ReactNode[]): import("react").ReactNode[];
            };
            readonly unshift: (...items: import("react").ReactNode[]) => number;
            readonly indexOf: (searchElement: import("react").ReactNode, fromIndex?: number | undefined) => number;
            readonly lastIndexOf: (searchElement: import("react").ReactNode, fromIndex?: number | undefined) => number;
            readonly every: {
                <S extends import("react").ReactNode>(predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => value is S, thisArg?: any): this is S[];
                (predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => unknown, thisArg?: any): boolean;
            };
            readonly some: (predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => unknown, thisArg?: any) => boolean;
            readonly forEach: (callbackfn: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => void, thisArg?: any) => void;
            readonly map: <U>(callbackfn: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => U, thisArg?: any) => U[];
            readonly filter: {
                <S_1 extends import("react").ReactNode>(predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => value is S_1, thisArg?: any): S_1[];
                (predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => unknown, thisArg?: any): import("react").ReactNode[];
            };
            readonly reduce: {
                (callbackfn: (previousValue: import("react").ReactNode, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => import("react").ReactNode): import("react").ReactNode;
                (callbackfn: (previousValue: import("react").ReactNode, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => import("react").ReactNode, initialValue: import("react").ReactNode): import("react").ReactNode;
                <U_1>(callbackfn: (previousValue: U_1, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => U_1, initialValue: U_1): U_1;
            };
            readonly reduceRight: {
                (callbackfn: (previousValue: import("react").ReactNode, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => import("react").ReactNode): import("react").ReactNode;
                (callbackfn: (previousValue: import("react").ReactNode, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => import("react").ReactNode, initialValue: import("react").ReactNode): import("react").ReactNode;
                <U_2>(callbackfn: (previousValue: U_2, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => U_2, initialValue: U_2): U_2;
            };
            readonly find: {
                <S_2 extends import("react").ReactNode>(predicate: (this: void, value: import("react").ReactNode, index: number, obj: import("react").ReactNode[]) => value is S_2, thisArg?: any): S_2 | undefined;
                (predicate: (value: import("react").ReactNode, index: number, obj: import("react").ReactNode[]) => unknown, thisArg?: any): import("react").ReactNode;
            };
            readonly findIndex: (predicate: (value: import("react").ReactNode, index: number, obj: import("react").ReactNode[]) => unknown, thisArg?: any) => number;
            readonly fill: (value: import("react").ReactNode, start?: number | undefined, end?: number | undefined) => import("react").ReactNodeArray;
            readonly copyWithin: (target: number, start: number, end?: number | undefined) => import("react").ReactNodeArray;
            readonly entries: () => IterableIterator<[number, import("react").ReactNode]>;
            readonly keys: () => IterableIterator<number>;
            readonly values: () => IterableIterator<import("react").ReactNode>;
            readonly includes: (searchElement: import("react").ReactNode, fromIndex?: number | undefined) => boolean;
            readonly flatMap: <U_3, This = undefined>(callback: (this: This, value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => U_3 | readonly U_3[], thisArg?: This | undefined) => U_3[];
            readonly flat: <A, D extends number = 1>(this: A, depth?: D | undefined) => FlatArray<A, D>[];
            readonly [Symbol.iterator]: () => IterableIterator<import("react").ReactNode>;
            readonly [Symbol.unscopables]: () => {
                copyWithin: boolean;
                entries: boolean;
                fill: boolean;
                find: boolean;
                findIndex: boolean;
                keys: boolean;
                values: boolean;
            };
        } | {
            readonly key: import("react").Key | null;
            readonly children: boolean | import("react").ReactText | {
                readonly type: string | import("react").JSXElementConstructor<any>;
                readonly props: any;
                readonly key: import("react").Key | null;
            } | {} | {
                readonly [x: number]: boolean | import("react").ReactText | {
                    readonly type: string | import("react").JSXElementConstructor<any>;
                    readonly props: any;
                    readonly key: import("react").Key | null;
                } | {} | any | any | null | undefined;
                readonly length: number;
                readonly toString: () => string;
                readonly toLocaleString: () => string;
                readonly pop: () => import("react").ReactNode;
                readonly push: (...items: import("react").ReactNode[]) => number;
                readonly concat: {
                    (...items: ConcatArray<import("react").ReactNode>[]): import("react").ReactNode[];
                    (...items: (import("react").ReactNode | ConcatArray<import("react").ReactNode>)[]): import("react").ReactNode[];
                };
                readonly join: (separator?: string | undefined) => string;
                readonly reverse: () => import("react").ReactNode[];
                readonly shift: () => import("react").ReactNode;
                readonly slice: (start?: number | undefined, end?: number | undefined) => import("react").ReactNode[];
                readonly sort: (compareFn?: ((a: import("react").ReactNode, b: import("react").ReactNode) => number) | undefined) => import("react").ReactNodeArray;
                readonly splice: {
                    (start: number, deleteCount?: number | undefined): import("react").ReactNode[];
                    (start: number, deleteCount: number, ...items: import("react").ReactNode[]): import("react").ReactNode[];
                };
                readonly unshift: (...items: import("react").ReactNode[]) => number;
                readonly indexOf: (searchElement: import("react").ReactNode, fromIndex?: number | undefined) => number;
                readonly lastIndexOf: (searchElement: import("react").ReactNode, fromIndex?: number | undefined) => number;
                readonly every: {
                    <S extends import("react").ReactNode>(predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => value is S, thisArg?: any): this is S[];
                    (predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => unknown, thisArg?: any): boolean;
                };
                readonly some: (predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => unknown, thisArg?: any) => boolean;
                readonly forEach: (callbackfn: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => void, thisArg?: any) => void;
                readonly map: <U>(callbackfn: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => U, thisArg?: any) => U[];
                readonly filter: {
                    <S_1 extends import("react").ReactNode>(predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => value is S_1, thisArg?: any): S_1[];
                    (predicate: (value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => unknown, thisArg?: any): import("react").ReactNode[];
                };
                readonly reduce: {
                    (callbackfn: (previousValue: import("react").ReactNode, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => import("react").ReactNode): import("react").ReactNode;
                    (callbackfn: (previousValue: import("react").ReactNode, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => import("react").ReactNode, initialValue: import("react").ReactNode): import("react").ReactNode;
                    <U_1>(callbackfn: (previousValue: U_1, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => U_1, initialValue: U_1): U_1;
                };
                readonly reduceRight: {
                    (callbackfn: (previousValue: import("react").ReactNode, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => import("react").ReactNode): import("react").ReactNode;
                    (callbackfn: (previousValue: import("react").ReactNode, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => import("react").ReactNode, initialValue: import("react").ReactNode): import("react").ReactNode;
                    <U_2>(callbackfn: (previousValue: U_2, currentValue: import("react").ReactNode, currentIndex: number, array: import("react").ReactNode[]) => U_2, initialValue: U_2): U_2;
                };
                readonly find: {
                    <S_2 extends import("react").ReactNode>(predicate: (this: void, value: import("react").ReactNode, index: number, obj: import("react").ReactNode[]) => value is S_2, thisArg?: any): S_2 | undefined;
                    (predicate: (value: import("react").ReactNode, index: number, obj: import("react").ReactNode[]) => unknown, thisArg?: any): import("react").ReactNode;
                };
                readonly findIndex: (predicate: (value: import("react").ReactNode, index: number, obj: import("react").ReactNode[]) => unknown, thisArg?: any) => number;
                readonly fill: (value: import("react").ReactNode, start?: number | undefined, end?: number | undefined) => import("react").ReactNodeArray;
                readonly copyWithin: (target: number, start: number, end?: number | undefined) => import("react").ReactNodeArray;
                readonly entries: () => IterableIterator<[number, import("react").ReactNode]>;
                readonly keys: () => IterableIterator<number>;
                readonly values: () => IterableIterator<import("react").ReactNode>;
                readonly includes: (searchElement: import("react").ReactNode, fromIndex?: number | undefined) => boolean;
                readonly flatMap: <U_3, This = undefined>(callback: (this: This, value: import("react").ReactNode, index: number, array: import("react").ReactNode[]) => U_3 | readonly U_3[], thisArg?: This | undefined) => U_3[];
                readonly flat: <A, D extends number = 1>(this: A, depth?: D | undefined) => FlatArray<A, D>[];
                readonly [Symbol.iterator]: () => IterableIterator<import("react").ReactNode>;
                readonly [Symbol.unscopables]: () => {
                    copyWithin: boolean;
                    entries: boolean;
                    fill: boolean;
                    find: boolean;
                    findIndex: boolean;
                    keys: boolean;
                    values: boolean;
                };
            } | any | null | undefined;
            readonly type: string | import("react").JSXElementConstructor<any>;
            readonly props: any;
        } | null | undefined;
    }[];
}, action: ActionTypes) => Record<string, PortalType[]>;
