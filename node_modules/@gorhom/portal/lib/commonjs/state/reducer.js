"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = void 0;

var _immer = _interopRequireWildcard(require("immer"));

var _constants = require("./constants");

var _logger = require("../utilities/logger");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

(0, _immer.enableES5)();
(0, _immer.setAutoFreeze)(false);

const registerHost = (draft, hostName) => {
  if (!(hostName in draft)) {
    draft[hostName] = [];
  }
};

const deregisterHost = (draft, hostName) => {
  delete draft[hostName];
};

const addPortal = (draft, hostName, portalName, node) => {
  if (!(hostName in draft)) {
    registerHost(draft, hostName);
  }
  /**
   * updated portal, if it was already added.
   */


  const index = draft[hostName].findIndex(item => item.name === portalName);

  if (index !== -1) {
    draft[hostName][index].node = node;
  } else {
    draft[hostName].push({
      name: portalName,
      node
    });
  }
};

const updatePortal = (draft, hostName, portalName, node) => {
  if (!(hostName in draft)) {
    (0, _logger.print)({
      component: reducer.name,
      method: updatePortal.name,
      params: "Failed to update portal '".concat(portalName, "', '").concat(hostName, "' was not registered!")
    });
    return;
  }

  const index = draft[hostName].findIndex(item => item.name === portalName);

  if (index !== -1) {
    draft[hostName][index].node = node;
  }
};

const removePortal = (draft, hostName, portalName) => {
  if (!(hostName in draft)) {
    (0, _logger.print)({
      component: reducer.name,
      method: removePortal.name,
      params: "Failed to remove portal '".concat(portalName, "', '").concat(hostName, "' was not registered!")
    });
    return;
  }

  const index = draft[hostName].findIndex(item => item.name === portalName);
  if (index !== -1) draft[hostName].splice(index, 1);
};

const reducer = (0, _immer.default)((draft, action) => {
  const {
    type
  } = action;

  switch (type) {
    case _constants.ACTIONS.REGISTER_HOST:
      registerHost(draft, action.hostName);
      break;

    case _constants.ACTIONS.DEREGISTER_HOST:
      deregisterHost(draft, action.hostName);
      break;

    case _constants.ACTIONS.ADD_PORTAL:
      addPortal(draft, action.hostName, action.portalName, action.node);
      break;

    case _constants.ACTIONS.UPDATE_PORTAL:
      updatePortal(draft, action.hostName, action.portalName, action.node);
      break;

    case _constants.ACTIONS.REMOVE_PORTAL:
      removePortal(draft, action.hostName, action.portalName);
      break;
  }
});
exports.reducer = reducer;
//# sourceMappingURL=reducer.js.map