{"version":3,"sources":["Portal.tsx"],"names":["PortalComponent","name","_providedName","hostName","handleOnMount","handleOnUnmount","children","addPortal","removePortal","updatePortal","Portal","displayName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAGA,MAAMA,eAAe,GAAG,CAAC;AACvBC,EAAAA,IAAI,EAAEC,aADiB;AAEvBC,EAAAA,QAFuB;AAGvBC,EAAAA,aAHuB;AAIvBC,EAAAA,eAJuB;AAKvBC,EAAAA;AALuB,CAAD,KAML;AACjB;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAA4C,sBAAUN,QAAV,CAAlD,CAFiB,CAGjB;AAEA;;AACA,QAAMF,IAAI,GAAG,oBAAQ,MAAMC,aAAa,IAAI,wBAA/B,EAAyC,CAACA,aAAD,CAAzC,CAAb,CANiB,CAOjB;AAEA;;AACA,wBAAU,MAAM;AACd,QAAIE,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAAC,MAAMG,SAAS,CAACN,IAAD,EAAOK,QAAP,CAAhB,CAAb;AACD,KAFD,MAEO;AACLC,MAAAA,SAAS,CAACN,IAAD,EAAOK,QAAP,CAAT;AACD,KALa,CAMd;;AACD,GAPD,EAOG,EAPH;AAQA,wBAAU,MAAM;AACd,WAAO,MAAM;AACX,UAAID,eAAJ,EAAqB;AACnBA,QAAAA,eAAe,CAAC,MAAMG,YAAY,CAACP,IAAD,CAAnB,CAAf;AACD,OAFD,MAEO;AACLO,QAAAA,YAAY,CAACP,IAAD,CAAZ;AACD;AACF,KAND,CADc,CAQd;AACD,GATD,EASG,EATH;AAUA,wBAAU,MAAM;AACdQ,IAAAA,YAAY,CAACR,IAAD,EAAOK,QAAP,CAAZ,CADc,CAEd;AACD,GAHD,EAGG,CAACA,QAAD,CAHH,EA5BiB,CAgCjB;;AAEA,SAAO,IAAP;AACD,CAzCD;;AA2CA,MAAMI,MAAM,gBAAG,iBAAKV,eAAL,CAAf;AACAU,MAAM,CAACC,WAAP,GAAqB,QAArB;eAEeD,M","sourcesContent":["import { memo, useEffect, useMemo } from 'react';\nimport { nanoid } from 'nanoid/non-secure';\nimport { usePortal } from '../../hooks';\nimport type { PortalProps } from './types';\n\nconst PortalComponent = ({\n  name: _providedName,\n  hostName,\n  handleOnMount,\n  handleOnUnmount,\n  children,\n}: PortalProps) => {\n  //#region hooks\n  const { addPortal, removePortal, updatePortal } = usePortal(hostName);\n  //#endregion\n\n  //#region variables\n  const name = useMemo(() => _providedName || nanoid(), [_providedName]);\n  //#endregion\n\n  //#region effects\n  useEffect(() => {\n    if (handleOnMount) {\n      handleOnMount(() => addPortal(name, children));\n    } else {\n      addPortal(name, children);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    return () => {\n      if (handleOnUnmount) {\n        handleOnUnmount(() => removePortal(name));\n      } else {\n        removePortal(name);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    updatePortal(name, children);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [children]);\n  //#endregion\n\n  return null;\n};\n\nconst Portal = memo(PortalComponent);\nPortal.displayName = 'Portal';\n\nexport default Portal;\n"]}