{"version":3,"sources":["types.d.ts"],"names":["BottomSheetSectionListType","Component"],"mappings":";;;;;;;AAyBO,MAAMA,0BAAN,SAAkDC,SAAlD,CAEL","sourcesContent":["import type { Component, EffectCallback, DependencyList } from 'react';\nimport type {\n  SectionListProps as RNSectionListProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport type Animated from 'react-native-reanimated';\n\ntype BottomSheetSectionListProps<T> = Omit<\n  RNSectionListProps<T>,\n  | 'overScrollMode'\n  | 'bounces'\n  | 'decelerationRate'\n  | 'onScrollBeginDrag'\n  | 'scrollEventThrottle'\n  | 'style'\n> & {\n  style?: StyleProp<Animated.AnimateStyle<ViewStyle>>;\n  /**\n   * This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with `React Navigation`. You will need to provide `useFocusEffect` from `@react-navigation/native`.\n   * @type (effect: EffectCallback, deps?: DependencyList) => void\n   */\n  focusHook?: (effect: EffectCallback, deps?: DependencyList) => void;\n};\n\nexport class BottomSheetSectionListType<T = any> extends Component<\n  BottomSheetSectionListProps<T>\n> {\n  /**\n   * Scrolls to the item at the specified sectionIndex and itemIndex (within the section)\n   * positioned in the viewable area such that viewPosition 0 places it at the top\n   * (and may be covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle.\n   */\n  scrollToLocation(params: SectionListScrollParams): void;\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction(): void;\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators(): void;\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): ScrollView | undefined;\n\n  /**\n   * Provides a handle to the underlying scroll node.\n   */\n  getScrollableNode(): NodeHandle | undefined;\n}\n"]}