{"version":3,"sources":["BottomSheetDraggableView.tsx"],"names":["BottomSheetDraggableViewComponent","nativeGestureRef","gestureType","style","children","rest","panGestureRef","enableContentPanningGesture","containerTapGestureRef","handlePanGestureState","handlePanGestureTranslationY","handlePanGestureVelocityY","contentPanGestureState","contentPanGestureTranslationY","contentPanGestureVelocityY","simultaneousHandlers","containerStyle","styles","container","handleGestureEvent","nativeEvent","state","translationY","velocityY","BottomSheetDraggableView","isEqual"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,MAAMA,iCAAiC,GAAG,CAAC;AACzCC,EAAAA,gBADyC;AAEzCC,EAAAA,WAAW,GAAG,QAF2B;AAGzCC,EAAAA,KAHyC;AAIzCC,EAAAA,QAJyC;AAKzC,KAAGC;AALsC,CAAD,KAML;AACnC;AACA,QAAMC,aAAa,GAAG,mBAA0B,IAA1B,CAAtB,CAFmC,CAInC;;AACA,QAAM;AACJC,IAAAA,2BADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA,qBAHI;AAIJC,IAAAA,4BAJI;AAKJC,IAAAA,yBALI;AAMJC,IAAAA,sBANI;AAOJC,IAAAA,6BAPI;AAQJC,IAAAA;AARI,MASF,oCATJ,CALmC,CAgBnC;;AACA,QAAMC,oBAAoB,GAAG,oBAC3B,MACEd,gBAAgB,GACZ,CAACO,sBAAD,EAAyBP,gBAAzB,CADY,GAEZO,sBAJqB,EAK3B,CAACA,sBAAD,EAAyBP,gBAAzB,CAL2B,CAA7B,CAjBmC,CAyBnC;;AACA,QAAMe,cAAc,GAAG,oBACrB,MAAOb,KAAK,GAAG,CAACc,eAAOC,SAAR,EAAmBf,KAAnB,CAAH,GAA+Bc,eAAOC,SAD7B,EAErB,CAACf,KAAD,CAFqB,CAAvB,CA1BmC,CA+BnC;;AACA,QAAMgB,kBAAkB,GAAG,oBACzB,MACEjB,WAAW,KAAK,SAAhB,GACI,kCAAM,CACJ;AACEkB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAET,sBADI;AAEXU,MAAAA,YAAY,EAAET,6BAFH;AAGXU,MAAAA,SAAS,EAAET;AAHA;AADf,GADI,CAAN,CADJ,GAUI,kCAAM,CACJ;AACEM,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAEZ,qBADI;AAEXa,MAAAA,YAAY,EAAEZ,4BAFH;AAGXa,MAAAA,SAAS,EAAEZ;AAHA;AADf,GADI,CAAN,CAZmB,EAqBzB,CACET,WADF,EAEEU,sBAFF,EAGEC,6BAHF,EAIEC,0BAJF,EAKEL,qBALF,EAMEC,4BANF,EAOEC,yBAPF,CArByB,CAA3B,CAhCmC,CAgEnC;;AACA,sBACE,6BAAC,4CAAD;AACE,IAAA,GAAG,EAAEL,aADP;AAEE,IAAA,OAAO,EAAEC,2BAFX;AAGE,IAAA,oBAAoB,EAAEQ,oBAHxB;AAIE,IAAA,uBAAuB,EAAE,KAJ3B;AAKE,IAAA,cAAc,EAAEI,kBALlB;AAME,IAAA,oBAAoB,EAAEA;AANxB,kBAQE,6BAAC,8BAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEH;AAAtB,KAA0CX,IAA1C,GACGD,QADH,CARF,CADF;AAcD,CArFD;;AAuFA,MAAMoB,wBAAwB,gBAAG,iBAC/BxB,iCAD+B,EAE/ByB,eAF+B,CAAjC;eAKeD,wB","sourcesContent":["import React, { useMemo, useRef, memo } from 'react';\nimport isEqual from 'lodash.isequal';\nimport Animated, { event } from 'react-native-reanimated';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport { useBottomSheetInternal } from '../../hooks';\nimport type { BottomSheetDraggableViewProps } from './types';\nimport { styles } from './styles';\n\nconst BottomSheetDraggableViewComponent = ({\n  nativeGestureRef,\n  gestureType = 'HANDLE',\n  style,\n  children,\n  ...rest\n}: BottomSheetDraggableViewProps) => {\n  // refs\n  const panGestureRef = useRef<PanGestureHandler>(null);\n\n  // hooks\n  const {\n    enableContentPanningGesture,\n    containerTapGestureRef,\n    handlePanGestureState,\n    handlePanGestureTranslationY,\n    handlePanGestureVelocityY,\n    contentPanGestureState,\n    contentPanGestureTranslationY,\n    contentPanGestureVelocityY,\n  } = useBottomSheetInternal();\n\n  // variables\n  const simultaneousHandlers = useMemo(\n    () =>\n      nativeGestureRef\n        ? [containerTapGestureRef, nativeGestureRef]\n        : containerTapGestureRef,\n    [containerTapGestureRef, nativeGestureRef]\n  );\n\n  // styles\n  const containerStyle = useMemo(\n    () => (style ? [styles.container, style] : styles.container),\n    [style]\n  );\n\n  // callbacks\n  const handleGestureEvent = useMemo(\n    () =>\n      gestureType === 'CONTENT'\n        ? event([\n            {\n              nativeEvent: {\n                state: contentPanGestureState,\n                translationY: contentPanGestureTranslationY,\n                velocityY: contentPanGestureVelocityY,\n              },\n            },\n          ])\n        : event([\n            {\n              nativeEvent: {\n                state: handlePanGestureState,\n                translationY: handlePanGestureTranslationY,\n                velocityY: handlePanGestureVelocityY,\n              },\n            },\n          ]),\n    [\n      gestureType,\n      contentPanGestureState,\n      contentPanGestureTranslationY,\n      contentPanGestureVelocityY,\n      handlePanGestureState,\n      handlePanGestureTranslationY,\n      handlePanGestureVelocityY,\n    ]\n  );\n\n  // effects\n  return (\n    <PanGestureHandler\n      ref={panGestureRef}\n      enabled={enableContentPanningGesture}\n      simultaneousHandlers={simultaneousHandlers}\n      shouldCancelWhenOutside={false}\n      onGestureEvent={handleGestureEvent}\n      onHandlerStateChange={handleGestureEvent}\n    >\n      <Animated.View style={containerStyle} {...rest}>\n        {children}\n      </Animated.View>\n    </PanGestureHandler>\n  );\n};\n\nconst BottomSheetDraggableView = memo(\n  BottomSheetDraggableViewComponent,\n  isEqual\n);\n\nexport default BottomSheetDraggableView;\n"]}