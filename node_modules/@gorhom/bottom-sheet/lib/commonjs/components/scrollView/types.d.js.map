{"version":3,"sources":["types.d.ts"],"names":["BottomSheetScrollViewType","BottomSheetScrollViewBase"],"mappings":";;;;;;;;;AAiCO,MAAMA,yBAAN,SAAwCC,yBAAxC,CAAkE;AAAA;AAAA;;AAAA;AAAA;AAwCvE;;;;;AAxCuE","sourcesContent":["import type { Component, EffectCallback, DependencyList } from 'react';\nimport type {\n  ScrollViewProps as RNScrollViewProps,\n  ScrollResponderMixin,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport type Animated from 'react-native-reanimated';\n\nexport type BottomSheetScrollViewProps = Omit<\n  RNScrollViewProps,\n  | 'overScrollMode'\n  | 'bounces'\n  | 'decelerationRate'\n  | 'onScrollBeginDrag'\n  | 'scrollEventThrottle'\n  | 'style'\n> & {\n  style?: StyleProp<Animated.AnimateStyle<ViewStyle>>;\n  children: React.ReactNode[] | React.ReactNode;\n  /**\n   * This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with `React Navigation`. You will need to provide `useFocusEffect` from `@react-navigation/native`.\n   * @type (effect: EffectCallback, deps?: DependencyList) => void\n   */\n  focusHook?: (effect: EffectCallback, deps?: DependencyList) => void;\n};\n\ntype Constructor<T> = new (...args: any[]) => T;\n\ndeclare class BottomSheetScrollViewComponent extends Component<BottomSheetScrollViewProps> {}\ndeclare const BottomSheetScrollViewBase: Constructor<ScrollResponderMixin> &\n  typeof BottomSheetScrollViewComponent;\n\nexport class BottomSheetScrollViewType extends BottomSheetScrollViewBase {\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   * Syntax:\n   *\n   * scrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\n   *\n   * Note: The weird argument signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo(\n    y?: number | { x?: number; y?: number; animated?: boolean },\n    x?: number,\n    animated?: boolean\n  ): void;\n\n  /**\n   * A helper function that scrolls to the end of the scrollview;\n   * If this is a vertical ScrollView, it scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * The options object has an animated prop, that enables the scrolling animation or not.\n   * The animated prop defaults to true\n   */\n  scrollToEnd(options?: { animated: boolean }): void;\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder(): JSX.Element;\n\n  getScrollableNode(): any;\n\n  // Undocumented\n  getInnerViewNode(): any;\n\n  /**\n   * @deprecated Use scrollTo instead\n   */\n  scrollWithoutAnimationTo?: (y: number, x: number) => void;\n}\n"]}