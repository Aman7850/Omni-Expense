{"version":3,"sources":["ScrollView.tsx"],"names":["AnimatedScrollView","Animated","createAnimatedComponent","RNScrollView","BottomSheetScrollViewComponent","props","ref","focusHook","useFocusHook","useEffect","rest","nativeGestureRef","scrollableRef","handleOnBeginDragEvent","handleOnContentSizeChange","handleSettingScrollable","enableContentPanningGesture","containerTapGestureRef","decelerationRate","current","getNode","styles","container","BottomSheetScrollView","isEqual"],"mappings":";;;;;;;AAAA;;AAQA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AAKA;;;;;;;;;;AAEA,MAAMA,kBAAkB,GAAGC,+BAASC,uBAAT,CACzBC,uBADyB,CAA3B;;AAOA,MAAMC,8BAA8B,gBAAG,uBACrC,CAACC,KAAD,EAAoCC,GAApC,KAA+D;AAC7D;AACA,QAAM;AAAEC,IAAAA,SAAS,EAAEC,YAAY,GAAGC,gBAA5B;AAAuC,OAAGC;AAA1C,MAAmDL,KAAzD,CAF6D,CAI7D;;AACA,QAAMM,gBAAgB,GAAG,mBAAiC,IAAjC,CAAzB,CAL6D,CAO7D;;AACA,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA,yBAHI;AAIJC,IAAAA;AAJI,MAKF,kCAAsB,YAAtB,CALJ;AAMA,QAAM;AACJC,IAAAA,2BADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA;AAHI,MAIF,oCAJJ,CAd6D,CAoB7D;AACA;;AACA,kCAAoBZ,GAApB,EAAyB,MAAMM,aAAa,CAACO,OAAd,CAAuBC,OAAvB,EAA/B;AACAZ,EAAAA,YAAY,CAACO,uBAAD,CAAZ;AAEA,sBACE,6BAAC,iCAAD;AACE,IAAA,gBAAgB,EAAEJ,gBADpB;AAEE,IAAA,WAAW,EAAC,SAFd;AAGE,IAAA,KAAK,EAAEU,eAAOC;AAHhB,kBAKE,6BAAC,mDAAD;AACE,IAAA,GAAG,EAAEX,gBADP;AAEE,IAAA,OAAO,EAAEK,2BAFX;AAGE,IAAA,OAAO,EAAEC;AAHX,kBAKE,6BAAC,kBAAD,eACMP,IADN;AAEE,IAAA,GAAG,EAAEE,aAFP;AAGE,IAAA,cAAc,EAAC,OAHjB;AAIE,IAAA,OAAO,EAAE,KAJX;AAKE,IAAA,gBAAgB,EAAEM,gBALpB;AAME,IAAA,mBAAmB,EAAE,EANvB;AAOE,IAAA,mBAAmB,EAAEJ,yBAPvB;AAQE,IAAA,iBAAiB,EAAED;AARrB,KALF,CALF,CADF;AAwBD,CAlDoC,CAAvC;AAqDA,MAAMU,qBAAqB,gBAAG,iBAAKnB,8BAAL,EAAqCoB,eAArC,CAA9B;eAEgBD,qB","sourcesContent":["import React, {\n  useRef,\n  useImperativeHandle,\n  useEffect,\n  forwardRef,\n  Ref,\n  memo,\n} from 'react';\nimport {\n  ScrollView as RNScrollView,\n  ScrollViewProps as RNScrollViewProps,\n  ViewStyle,\n} from 'react-native';\nimport isEqual from 'lodash.isequal';\nimport Animated from 'react-native-reanimated';\nimport { NativeViewGestureHandler } from 'react-native-gesture-handler';\nimport BottomSheetDraggableView from '../bottomSheetDraggableView';\nimport { useScrollableInternal, useBottomSheetInternal } from '../../hooks';\nimport type {\n  BottomSheetScrollViewType,\n  BottomSheetScrollViewProps,\n} from './types';\nimport { styles } from './styles';\n\nconst AnimatedScrollView = Animated.createAnimatedComponent(\n  RNScrollView\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, RNScrollViewProps>,\n  any\n>;\n\nconst BottomSheetScrollViewComponent = forwardRef(\n  (props: BottomSheetScrollViewProps, ref: Ref<RNScrollView>) => {\n    // props\n    const { focusHook: useFocusHook = useEffect, ...rest } = props;\n\n    // refs\n    const nativeGestureRef = useRef<NativeViewGestureHandler>(null);\n\n    // hooks\n    const {\n      scrollableRef,\n      handleOnBeginDragEvent,\n      handleOnContentSizeChange,\n      handleSettingScrollable,\n    } = useScrollableInternal('ScrollView');\n    const {\n      enableContentPanningGesture,\n      containerTapGestureRef,\n      decelerationRate,\n    } = useBottomSheetInternal();\n\n    // effects\n    // @ts-ignore\n    useImperativeHandle(ref, () => scrollableRef.current!.getNode());\n    useFocusHook(handleSettingScrollable);\n\n    return (\n      <BottomSheetDraggableView\n        nativeGestureRef={nativeGestureRef}\n        gestureType=\"CONTENT\"\n        style={styles.container}\n      >\n        <NativeViewGestureHandler\n          ref={nativeGestureRef}\n          enabled={enableContentPanningGesture}\n          waitFor={containerTapGestureRef}\n        >\n          <AnimatedScrollView\n            {...rest}\n            ref={scrollableRef}\n            overScrollMode=\"never\"\n            bounces={false}\n            decelerationRate={decelerationRate}\n            scrollEventThrottle={16}\n            onContentSizeChange={handleOnContentSizeChange}\n            onScrollBeginDrag={handleOnBeginDragEvent}\n          />\n        </NativeViewGestureHandler>\n      </BottomSheetDraggableView>\n    );\n  }\n);\n\nconst BottomSheetScrollView = memo(BottomSheetScrollViewComponent, isEqual);\n\nexport default (BottomSheetScrollView as any) as typeof BottomSheetScrollViewType;\n"]}