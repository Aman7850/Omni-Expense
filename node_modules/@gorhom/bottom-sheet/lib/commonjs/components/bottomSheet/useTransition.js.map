{"version":3,"sources":["useTransition.ts"],"names":["useTransition","animatedIsLayoutReady","animationDuration","animationEasing","contentPanGestureState","contentPanGestureTranslationY","contentPanGestureVelocityY","handlePanGestureState","handlePanGestureTranslationY","handlePanGestureVelocityY","scrollableContentOffsetY","snapPoints","_snapPoints","currentIndexRef","initialPosition","onAnimate","currentGesture","GESTURE","UNDETERMINED","currentPosition","isPanningContent","State","ACTIVE","isPanningHandle","isPanning","shouldAnimate","manualSnapToPoint","clock","config","toValue","Animated","Value","duration","easing","animationState","finished","position","frameTime","time","finishTiming","translateY","CONTENT","length","velocityY","isAnimationInterrupted","HANDLE","END","_toValue","_animatedSnapPoints","currentIndex","current","nextIndex","indexOf"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport Animated, {\n  eq,\n  set,\n  add,\n  greaterOrEq,\n  lessOrEq,\n  and,\n  not,\n  clockRunning,\n  startClock,\n  timing,\n  stopClock,\n  multiply,\n  neq,\n  onChange,\n  or,\n  cond,\n  block,\n  call,\n  // debug,\n} from 'react-native-reanimated';\nimport { State } from 'react-native-gesture-handler';\nimport { useClock, useValue, snapPoint } from 'react-native-redash';\nimport { GESTURE } from '../../constants';\nimport { useReactiveValue, useReactiveValues } from '../../hooks';\nimport type { BottomSheetTransitionConfig } from './types';\n\nexport const useTransition = ({\n  animatedIsLayoutReady,\n  animationDuration,\n  animationEasing,\n  contentPanGestureState,\n  contentPanGestureTranslationY,\n  contentPanGestureVelocityY,\n  handlePanGestureState,\n  handlePanGestureTranslationY,\n  handlePanGestureVelocityY,\n  scrollableContentOffsetY,\n  snapPoints: _snapPoints,\n  currentIndexRef,\n  initialPosition,\n  onAnimate,\n}: BottomSheetTransitionConfig) => {\n  const currentGesture = useValue<GESTURE>(GESTURE.UNDETERMINED);\n  const currentPosition = useReactiveValue(initialPosition);\n  const snapPoints = useReactiveValues(_snapPoints);\n\n  const isPanningContent = useMemo(\n    () => eq(contentPanGestureState, State.ACTIVE),\n    [contentPanGestureState]\n  );\n  const isPanningHandle = useMemo(\n    () => eq(handlePanGestureState, State.ACTIVE),\n    [handlePanGestureState]\n  );\n  const isPanning = useMemo(() => or(isPanningContent, isPanningHandle), [\n    isPanningContent,\n    isPanningHandle,\n  ]);\n  const shouldAnimate = useValue(0);\n  const manualSnapToPoint = useValue<number>(-1);\n\n  const clock = useClock();\n  const config = useMemo(\n    () => ({\n      toValue: new Animated.Value(-1),\n      duration: animationDuration,\n      easing: animationEasing,\n    }),\n    [animationEasing, animationDuration]\n  );\n\n  const animationState = useMemo(\n    () => ({\n      finished: new Animated.Value(0),\n      position: new Animated.Value(initialPosition),\n      frameTime: new Animated.Value(0),\n      time: new Animated.Value(0),\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const finishTiming = useMemo(\n    () => [\n      // debug('finish timing', config.toValue),\n      set(currentGesture, GESTURE.UNDETERMINED),\n      set(shouldAnimate, 0),\n      set(currentPosition, config.toValue),\n      set(animationState.frameTime, 0),\n      set(animationState.time, 0),\n      stopClock(clock),\n    ],\n    [\n      animationState.frameTime,\n      animationState.time,\n      clock,\n      config.toValue,\n      currentGesture,\n      currentPosition,\n      shouldAnimate,\n    ]\n  );\n\n  const translateY = useMemo(\n    () =>\n      cond(\n        eq(currentGesture, GESTURE.CONTENT),\n        cond(\n          eq(currentPosition, snapPoints[snapPoints.length - 1]),\n          add(\n            contentPanGestureTranslationY,\n            multiply(scrollableContentOffsetY, -1)\n          ),\n          contentPanGestureTranslationY\n        ),\n        handlePanGestureTranslationY\n      ),\n    [\n      snapPoints,\n      currentGesture,\n      currentPosition,\n      contentPanGestureTranslationY,\n      handlePanGestureTranslationY,\n      scrollableContentOffsetY,\n    ]\n  );\n  const velocityY = useMemo(\n    () =>\n      cond(\n        eq(currentGesture, GESTURE.CONTENT),\n        contentPanGestureVelocityY,\n        handlePanGestureVelocityY\n      ),\n    [contentPanGestureVelocityY, handlePanGestureVelocityY, currentGesture]\n  );\n  const isAnimationInterrupted = useMemo(\n    () =>\n      and(\n        clockRunning(clock),\n        or(\n          isPanning,\n          and(\n            neq(manualSnapToPoint, -1),\n            neq(manualSnapToPoint, config.toValue)\n          )\n        )\n      ),\n    [clock, isPanning, config.toValue, manualSnapToPoint]\n  );\n  const position = useMemo(\n    () =>\n      block([\n        cond(\n          animatedIsLayoutReady,\n          [\n            // debug('current gesture', currentGesture),\n            /**\n             * In case animation get interrupted, we execute the finishTiming node and\n             * set current position the the animated position.\n             */\n            cond(isAnimationInterrupted, [\n              // debug('animation interrupted', isAnimationInterrupted),\n              finishTiming,\n              set(currentPosition, animationState.position),\n            ]),\n\n            /**\n             * Panning node\n             */\n            cond(isPanning, [\n              set(\n                currentGesture,\n                cond(isPanningContent, GESTURE.CONTENT, GESTURE.HANDLE)\n              ),\n              // debug('start panning', translateY),\n              cond(\n                not(\n                  greaterOrEq(\n                    add(currentPosition, translateY),\n                    snapPoints[snapPoints.length - 1]\n                  )\n                ),\n                [\n                  set(\n                    animationState.position,\n                    snapPoints[snapPoints.length - 1]\n                  ),\n                  set(animationState.finished, 0),\n                ],\n                cond(\n                  not(\n                    lessOrEq(add(currentPosition, translateY), snapPoints[0])\n                  ),\n                  [\n                    set(animationState.position, snapPoints[0]),\n                    set(animationState.finished, 0),\n                  ],\n                  [\n                    set(\n                      animationState.position,\n                      add(currentPosition, translateY)\n                    ),\n                    set(animationState.finished, 0),\n                  ]\n                )\n              ),\n            ]),\n\n            /**\n             * Gesture ended node.\n             */\n            onChange(\n              add(contentPanGestureState, handlePanGestureState),\n              cond(\n                or(\n                  and(\n                    eq(currentGesture, GESTURE.CONTENT),\n                    eq(contentPanGestureState, State.END)\n                  ),\n                  and(\n                    eq(currentGesture, GESTURE.HANDLE),\n                    eq(handlePanGestureState, State.END)\n                  )\n                ),\n                [\n                  // debug('gesture end', currentGesture),\n                  set(\n                    config.toValue,\n                    snapPoint(\n                      add(currentPosition, translateY),\n                      velocityY,\n                      snapPoints\n                    )\n                  ),\n                  /**\n                   * here we make sure that captured gesture was not the content scrolling.\n                   */\n                  cond(\n                    neq(config.toValue, animationState.position),\n                    set(shouldAnimate, 1),\n                    finishTiming\n                  ),\n                ]\n              )\n            ),\n\n            /**\n             * Manual snapping node.\n             */\n            cond(\n              and(\n                neq(manualSnapToPoint, -1),\n                or(\n                  neq(manualSnapToPoint, currentPosition),\n                  neq(manualSnapToPoint, animationState.position)\n                ),\n                neq(manualSnapToPoint, config.toValue)\n              ),\n              [\n                // debug('manualSnapToPoint', manualSnapToPoint),\n                set(config.toValue, manualSnapToPoint),\n                set(animationState.finished, 0),\n                set(shouldAnimate, 1),\n                set(manualSnapToPoint, -1),\n              ],\n              set(manualSnapToPoint, -1)\n            ),\n\n            /**\n             * Animation Node.\n             */\n            cond(shouldAnimate, [\n              // debug('animating', shouldAnimate),\n              cond(\n                and(not(clockRunning(clock)), not(animationState.finished)),\n                [\n                  // debug('start animating', shouldAnimate),\n                  /**\n                   * `onAnimate` node\n                   */\n                  call(\n                    [config.toValue, ...snapPoints],\n                    ([_toValue, ..._animatedSnapPoints]) => {\n                      const currentIndex = currentIndexRef.current!;\n                      const nextIndex = _animatedSnapPoints.indexOf(_toValue);\n\n                      if (onAnimate) {\n                        onAnimate(currentIndex, nextIndex);\n                      }\n                    }\n                  ),\n\n                  set(animationState.finished, 0),\n                  set(animationState.frameTime, 0),\n                  set(animationState.time, 0),\n                  startClock(clock),\n                ]\n              ),\n              timing(clock, animationState, config),\n              cond(animationState.finished, finishTiming),\n            ]),\n\n            animationState.position,\n          ],\n          0\n        ),\n      ]),\n    [\n      animatedIsLayoutReady,\n      animationState,\n      clock,\n      config,\n      currentGesture,\n      currentPosition,\n      finishTiming,\n      isAnimationInterrupted,\n      isPanning,\n      isPanningContent,\n      manualSnapToPoint,\n      shouldAnimate,\n      snapPoints,\n      translateY,\n      velocityY,\n      contentPanGestureState,\n      handlePanGestureState,\n      currentIndexRef,\n      onAnimate,\n    ]\n  );\n\n  return {\n    position,\n    translateY,\n    manualSnapToPoint,\n    currentPosition,\n    currentGesture,\n  };\n};\n"]}