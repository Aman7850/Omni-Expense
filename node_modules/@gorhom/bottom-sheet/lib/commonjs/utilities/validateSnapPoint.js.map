{"version":3,"sources":["validateSnapPoint.ts"],"names":["validateSnapPoint","snapPoint","includes","Number","isNaN","split"],"mappings":";;;;;;;AAAA;;;;AAEO,MAAMA,iBAAiB,GAAIC,SAAD,IAAoB;AACnD,0BACE,OAAOA,SAAP,KAAqB,QAArB,IAAiC,OAAOA,SAAP,KAAqB,QADxD,aAEMA,SAFN;AAKA,0BACE,OAAOA,SAAP,KAAqB,QAArB,IACG,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,CAACC,QAAV,CAAmB,GAAnB,CAFtC,aAGMD,SAHN;AAMA,0BACE,OAAOA,SAAP,KAAqB,QAArB,IACG,OAAOA,SAAP,KAAqB,QAArB,IACC,CAACE,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,SAAS,CAACI,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAD,CAAnB,CAHP,aAIMJ,SAJN;AAMD,CAlBM","sourcesContent":["import invariant from 'invariant';\n\nexport const validateSnapPoint = (snapPoint: any) => {\n  invariant(\n    typeof snapPoint === 'number' || typeof snapPoint === 'string',\n    `'${snapPoint}' is not a valid snap point! expected types are string or number.`\n  );\n\n  invariant(\n    typeof snapPoint === 'number' ||\n      (typeof snapPoint === 'string' && snapPoint.includes('%')),\n    `'${snapPoint}' is not a valid percentage snap point! expected percentage snap point must include '%'. e.g. '50%'`\n  );\n\n  invariant(\n    typeof snapPoint === 'number' ||\n      (typeof snapPoint === 'string' &&\n        !Number.isNaN(Number(snapPoint.split('%')[0]))),\n    `'${snapPoint}' is not a valid percentage snap point! expected percentage snap point must be only numbers and '%'. e.g. '50%'`\n  );\n};\n"]}