{"version":3,"sources":["useReactiveValue.ts"],"names":["useReactiveValue","value","ref","current","Animated","Value","setValue"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEO,MAAMA,gBAAgB,GAAIC,KAAD,IAAmB;AACjD;AACA,QAAMC,GAAG,GAAG,mBAA+B,IAA/B,CAAZ;;AACA,MAAIA,GAAG,CAACC,OAAJ,KAAgB,IAApB,EAA0B;AACxB;AACAD,IAAAA,GAAG,CAACC,OAAJ,GAAc,IAAIC,+BAASC,KAAb,CAAmBJ,KAAnB,CAAd;AACD,GANgD,CAQjD;;;AACA,wBAAU,MAAM;AACd,QAAIC,GAAG,CAACC,OAAR,EAAiB;AACfD,MAAAA,GAAG,CAACC,OAAJ,CAAYG,QAAZ,CAAqBL,KAArB;AACD;AACF,GAJD,EAIG,CAACA,KAAD,CAJH;AAMA,SAAOC,GAAG,CAACC,OAAX;AACD,CAhBM","sourcesContent":["import { useEffect, useRef } from 'react';\nimport Animated from 'react-native-reanimated';\n\nexport const useReactiveValue = (value: number) => {\n  // ref\n  const ref = useRef<Animated.Value<number>>(null);\n  if (ref.current === null) {\n    // @ts-ignore\n    ref.current = new Animated.Value(value);\n  }\n\n  // effects\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.setValue(value);\n    }\n  }, [value]);\n\n  return ref.current;\n};\n"]}