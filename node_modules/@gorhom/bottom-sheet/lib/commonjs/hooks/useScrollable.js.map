{"version":3,"sources":["useScrollable.ts"],"names":["useScrollable","scrollableRef","previousScrollableRef","scrollableContentOffsetY","setScrollableRef","ref","currentRefId","current","id","removeScrollableRef","scrollToTop","type","undefined","node","scrollToOffset","animated","offset","scrollTo","y","props","sections","length","scrollToLocation","itemIndex","sectionIndex","viewPosition","viewOffset","flashScrollableIndicators","flashScrollIndicators"],"mappings":"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","sourcesContent":["import { useCallback, useRef, RefObject } from 'react';\nimport {\n  findNodeHandle,\n  FlatList,\n  ScrollView,\n  SectionList,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { useValue } from 'react-native-redash';\nimport type { ScrollableRef, Scrollable } from '../types';\n\nexport const useScrollable = () => {\n  // refs\n  const scrollableRef = useRef<ScrollableRef>(null);\n  const previousScrollableRef = useRef<ScrollableRef>(null);\n\n  // variables\n  const scrollableContentOffsetY: Animated.Value<number> = useValue<number>(0);\n\n  // callbacks\n  const setScrollableRef = useCallback((ref: ScrollableRef) => {\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    if (currentRefId !== ref.id) {\n      if (scrollableRef.current) {\n        // @ts-ignore\n        previousScrollableRef.current = scrollableRef.current;\n      }\n      // @ts-ignore\n      scrollableRef.current = ref;\n    }\n  }, []);\n\n  const removeScrollableRef = useCallback((ref: RefObject<Scrollable>) => {\n    // find node handle id\n    let id = findNodeHandle(ref.current);\n\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    /**\n     * @DEV\n     * when the incoming node is actually the current node, we reset\n     * the current scrollable ref to the previous one.\n     */\n    if (id === currentRefId) {\n      // @ts-ignore\n      scrollableRef.current = previousScrollableRef.current;\n    }\n  }, []);\n\n  const scrollToTop = useCallback(() => {\n    let type = scrollableRef.current?.type ?? undefined;\n    let node = scrollableRef.current?.node ?? undefined;\n\n    if (!type || !node) {\n      return;\n    }\n\n    switch (type) {\n      case 'FlatList':\n        (node as FlatList).scrollToOffset({\n          animated: false,\n          offset: 0,\n        });\n        break;\n\n      case 'ScrollView':\n        (node as ScrollView).scrollTo({\n          y: 0,\n          animated: false,\n        });\n        break;\n\n      case 'SectionList':\n        if ((node as SectionList).props.sections.length === 0) {\n          return;\n        }\n        (node as SectionList).scrollToLocation({\n          itemIndex: 0,\n          sectionIndex: 0,\n          viewPosition: 0,\n          viewOffset: 1000,\n          animated: false,\n        });\n        break;\n    }\n  }, []);\n\n  const flashScrollableIndicators = useCallback(() => {\n    let type = scrollableRef.current?.type ?? undefined;\n    let node = scrollableRef.current?.node ?? undefined;\n\n    if (!type || !node) {\n      return;\n    }\n\n    // @ts-ignore\n    if (node.flashScrollIndicators) {\n      // @ts-ignore\n      node.flashScrollIndicators();\n    }\n  }, []);\n\n  return {\n    scrollableRef,\n    scrollableContentOffsetY,\n    setScrollableRef,\n    removeScrollableRef,\n    scrollToTop,\n    flashScrollableIndicators,\n  };\n};\n"]}