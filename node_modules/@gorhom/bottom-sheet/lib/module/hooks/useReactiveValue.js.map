{"version":3,"sources":["useReactiveValue.ts"],"names":["useEffect","useRef","Animated","useReactiveValue","value","ref","current","Value","setValue"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAmB;AACjD;AACA,QAAMC,GAAG,GAAGJ,MAAM,CAAyB,IAAzB,CAAlB;;AACA,MAAII,GAAG,CAACC,OAAJ,KAAgB,IAApB,EAA0B;AACxB;AACAD,IAAAA,GAAG,CAACC,OAAJ,GAAc,IAAIJ,QAAQ,CAACK,KAAb,CAAmBH,KAAnB,CAAd;AACD,GANgD,CAQjD;;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,GAAG,CAACC,OAAR,EAAiB;AACfD,MAAAA,GAAG,CAACC,OAAJ,CAAYE,QAAZ,CAAqBJ,KAArB;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;AAMA,SAAOC,GAAG,CAACC,OAAX;AACD,CAhBM","sourcesContent":["import { useEffect, useRef } from 'react';\nimport Animated from 'react-native-reanimated';\n\nexport const useReactiveValue = (value: number) => {\n  // ref\n  const ref = useRef<Animated.Value<number>>(null);\n  if (ref.current === null) {\n    // @ts-ignore\n    ref.current = new Animated.Value(value);\n  }\n\n  // effects\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.setValue(value);\n    }\n  }, [value]);\n\n  return ref.current;\n};\n"]}