{"version":3,"sources":["useScrollableInternal.ts"],"names":["useCallback","useRef","useMemo","findNodeHandle","event","useCode","onChange","set","call","useValue","useBottomSheetInternal","useScrollableInternal","type","scrollableContentHeightRef","scrollableContentOffsetYRef","scrollableContentOffsetY","scrollableRef","_scrollableContentOffsetY","setScrollableRef","removeScrollableRef","handleOnContentSizeChange","_","height","current","setValue","handleOnBeginDragEvent","nativeEvent","contentOffset","y","handleSettingScrollable","id","node","getNode","console","warn","args"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,OAA9B,QAA6C,OAA7C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,GAAnC,EAAwCC,IAAxC,QAAoD,yBAApD;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,sBAAT,QAAuC,iCAAvC;AAGA,OAAO,MAAMC,qBAAqB,GAAIC,IAAD,IAA0B;AAC7D;AACA,QAAMC,0BAA0B,GAAGZ,MAAM,CAAS,CAAT,CAAzC;AACA,QAAMa,2BAA2B,GAAGb,MAAM,CAAS,CAAT,CAA1C;AACA,QAAMc,wBAAwB,GAAGN,QAAQ,CAAS,CAAT,CAAzC;AACA,QAAMO,aAAa,GAAGf,MAAM,CAAa,IAAb,CAA5B,CAL6D,CAO7D;;AACA,QAAM;AACJc,IAAAA,wBAAwB,EAAEE,yBADtB;AAEJC,IAAAA,gBAFI;AAGJC,IAAAA;AAHI,MAIFT,sBAAsB,EAJ1B,CAR6D,CAc7D;;AACA;;;;;AAIA,QAAMU,yBAAyB,GAAGpB,WAAW,CAC3C,CAACqB,CAAD,EAAIC,MAAJ,KAAuB;AACrB,QAAIT,0BAA0B,CAACU,OAA3B,GAAqCD,MAAzC,EAAiD;AAC/CP,MAAAA,wBAAwB,CAACS,QAAzB,CAAkC,CAAlC;AACD;;AACDX,IAAAA,0BAA0B,CAACU,OAA3B,GAAqCD,MAArC;AACD,GAN0C,EAO3C,CAACP,wBAAD,CAP2C,CAA7C;AASA,QAAMU,sBAAsB,GAAGvB,OAAO,CACpC,MACEE,KAAK,CAAC,CACJ;AACEsB,IAAAA,WAAW,EAAE;AACXC,MAAAA,aAAa,EAAE;AAAEC,QAAAA,CAAC,EAAEb;AAAL;AADJ;AADf,GADI,CAAD,CAF6B,EASpC,CAACA,wBAAD,CAToC,CAAtC;AAWA,QAAMc,uBAAuB,GAAG7B,WAAW,CAAC,MAAM;AAChDiB,IAAAA,yBAAyB,CAACO,QAA1B,CAAmCV,2BAA2B,CAACS,OAA/D;;AAEA,UAAMO,EAAE,GAAG3B,cAAc,CAACa,aAAa,CAACO,OAAf,CAAzB;;AAEA,QAAIO,EAAJ,EAAQ;AACNZ,MAAAA,gBAAgB,CAAC;AACfY,QAAAA,EAAE,EAAEA,EADW;AAEflB,QAAAA,IAFe;AAGf;AACAmB,QAAAA,IAAI,EAAEf,aAAa,CAACO,OAAd,CAAuBS,OAAvB;AAJS,OAAD,CAAhB;AAMD,KAPD,MAOO;AACLC,MAAAA,OAAO,CAACC,IAAR;AACD;;AAED,WAAO,MAAM;AACXf,MAAAA,mBAAmB,CAACH,aAAD,CAAnB;AACD,KAFD;AAGD,GAnB0C,EAmBxC,CAACJ,IAAD,EAAOK,yBAAP,EAAkCE,mBAAlC,EAAuDD,gBAAvD,CAnBwC,CAA3C,CAvC6D,CA4D7D;;AACAb,EAAAA,OAAO,CACL,MACEC,QAAQ,CAACS,wBAAD,EAA2B,CACjCR,GAAG,CAACU,yBAAD,EAA4BF,wBAA5B,CAD8B,EAEjCP,IAAI,CAAC,CAACO,wBAAD,CAAD,EAA6BoB,IAAI,IAAI;AACvCrB,IAAAA,2BAA2B,CAACS,OAA5B,GAAsCY,IAAI,CAAC,CAAD,CAA1C;AACD,GAFG,CAF6B,CAA3B,CAFL,EAQL,EARK,CAAP;AAWA,SAAO;AACLnB,IAAAA,aADK;AAELS,IAAAA,sBAFK;AAGLL,IAAAA,yBAHK;AAILS,IAAAA;AAJK,GAAP;AAMD,CA9EM","sourcesContent":["import { useCallback, useRef, useMemo } from 'react';\nimport { findNodeHandle } from 'react-native';\nimport { event, useCode, onChange, set, call } from 'react-native-reanimated';\nimport { useValue } from 'react-native-redash';\nimport { useBottomSheetInternal } from '../hooks/useBottomSheetInternal';\nimport type { Scrollable, ScrollableType } from '../types';\n\nexport const useScrollableInternal = (type: ScrollableType) => {\n  // refs\n  const scrollableContentHeightRef = useRef<number>(0);\n  const scrollableContentOffsetYRef = useRef<number>(0);\n  const scrollableContentOffsetY = useValue<number>(0);\n  const scrollableRef = useRef<Scrollable>(null);\n\n  // hooks\n  const {\n    scrollableContentOffsetY: _scrollableContentOffsetY,\n    setScrollableRef,\n    removeScrollableRef,\n  } = useBottomSheetInternal();\n\n  // callbacks\n  /**\n   * Reset the scrollable offset y when its size get smaller,\n   * this fixes #286.\n   */\n  const handleOnContentSizeChange = useCallback(\n    (_, height: number) => {\n      if (scrollableContentHeightRef.current > height) {\n        scrollableContentOffsetY.setValue(0);\n      }\n      scrollableContentHeightRef.current = height;\n    },\n    [scrollableContentOffsetY]\n  );\n  const handleOnBeginDragEvent = useMemo(\n    () =>\n      event([\n        {\n          nativeEvent: {\n            contentOffset: { y: scrollableContentOffsetY },\n          },\n        },\n      ]),\n    [scrollableContentOffsetY]\n  );\n  const handleSettingScrollable = useCallback(() => {\n    _scrollableContentOffsetY.setValue(scrollableContentOffsetYRef.current);\n\n    const id = findNodeHandle(scrollableRef.current);\n\n    if (id) {\n      setScrollableRef({\n        id: id,\n        type,\n        // @ts-ignore\n        node: scrollableRef.current!.getNode(),\n      });\n    } else {\n      console.warn(`Couldn't find the scrollable node handle id!`);\n    }\n\n    return () => {\n      removeScrollableRef(scrollableRef);\n    };\n  }, [type, _scrollableContentOffsetY, removeScrollableRef, setScrollableRef]);\n\n  // effects\n  useCode(\n    () =>\n      onChange(scrollableContentOffsetY, [\n        set(_scrollableContentOffsetY, scrollableContentOffsetY),\n        call([scrollableContentOffsetY], args => {\n          scrollableContentOffsetYRef.current = args[0];\n        }),\n      ]),\n    []\n  );\n\n  return {\n    scrollableRef,\n    handleOnBeginDragEvent,\n    handleOnContentSizeChange,\n    handleSettingScrollable,\n  };\n};\n"]}