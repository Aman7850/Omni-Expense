{"version":3,"sources":["BottomSheetHandleContainer.tsx"],"names":["React","memo","useCallback","useMemo","PanGestureHandler","Animated","isEqual","BottomSheetHandle","BottomSheetHandleContainerComponent","animatedIndex","animatedPosition","simultaneousHandlers","enableHandlePanningGesture","shouldMeasureHeight","handleComponent","_providedHandleComponent","onGestureEvent","onHandlerStateChange","onMeasureHeight","shouldRenderHandle","handleOnLayout","nativeEvent","layout","height","renderHandle","HandleComponent","undefined","BottomSheetHandleContainer"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,OAAnC,QAAkD,OAAlD;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;;AAGA,MAAMC,mCAAmC,GAAG,CAAC;AAC3CC,EAAAA,aAD2C;AAE3CC,EAAAA,gBAF2C;AAG3CC,EAAAA,oBAH2C;AAI3CC,EAAAA,0BAJ2C;AAK3CC,EAAAA,mBAL2C;AAM3CC,EAAAA,eAAe,EAAEC,wBAN0B;AAO3CC,EAAAA,cAP2C;AAQ3CC,EAAAA,oBAR2C;AAS3CC,EAAAA;AAT2C,CAAD,KAUL;AACrC;AACA,QAAMC,kBAAkB,GAAGhB,OAAO,CAAC,MAAMY,wBAAwB,KAAK,IAApC,EAA0C,CAC1EA,wBAD0E,CAA1C,CAAlC,CAFqC,CAKrC;AAEA;;AACA,QAAMK,cAAc,GAAGlB,WAAW,CAChC,CAAC;AACCmB,IAAAA,WAAW,EAAE;AACXC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AADG;AADd,GAAD,KAIM;AACJL,IAAAA,eAAe,CAACK,MAAD,CAAf;AACD,GAP+B,EAQhC,CAACL,eAAD,CARgC,CAAlC,CARqC,CAkBrC;AAEA;;AACA,QAAMM,YAAY,GAAGtB,WAAW,CAAC,MAAM;AACrC,QAAIa,wBAAwB,KAAK,IAAjC,EAAuC;AACrC,aAAO,IAAP;AACD;;AACD,UAAMU,eAAe,GACnBV,wBAAwB,KAAKW,SAA7B,GACInB,iBADJ,GAEIQ,wBAHN;AAKA,wBACE,oBAAC,eAAD;AACE,MAAA,aAAa,EAAEN,aADjB;AAEE,MAAA,gBAAgB,EAAEC;AAFpB,MADF;AAMD,GAf+B,EAe7B,CAACD,aAAD,EAAgBC,gBAAhB,EAAkCK,wBAAlC,CAf6B,CAAhC,CArBqC,CAsCrC;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOI,kBAAkB,gBACvB,oBAAC,iBAAD;AACE,IAAA,oBAAoB,EAAER,oBADxB;AAEE,IAAA,uBAAuB,EAAE,KAF3B;AAGE,IAAA,OAAO,EAAEC,0BAHX;AAIE,IAAA,cAAc,EAAEI,cAJlB;AAKE,IAAA,oBAAoB,EAAEC;AALxB,kBAOE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,UAAU,EAAE,IADd;AAEE,IAAA,iBAAiB,EAAC,YAFpB;AAGE,IAAA,kBAAkB,EAAC,qBAHrB;AAIE,IAAA,iBAAiB,EAAC,wDAJpB;AAKE,IAAA,QAAQ,EAAEJ,mBAAmB,GAAGO,cAAH,GAAoBM;AALnD,KAOGF,YAAY,EAPf,CAPF,CADuB,GAkBrB,IAlBJ,CA5CqC,CA+DrC;AACD,CA1ED;;AA4EA,MAAMG,0BAA0B,gBAAG1B,IAAI,CACrCO,mCADqC,EAErCF,OAFqC,CAAvC;AAKA,eAAeqB,0BAAf","sourcesContent":["import React, { memo, useCallback, useMemo } from 'react';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport isEqual from 'lodash.isequal';\nimport BottomSheetHandle from '../bottomSheetHandle';\nimport type { BottomSheetHandleContainerProps } from './types';\n\nconst BottomSheetHandleContainerComponent = ({\n  animatedIndex,\n  animatedPosition,\n  simultaneousHandlers,\n  enableHandlePanningGesture,\n  shouldMeasureHeight,\n  handleComponent: _providedHandleComponent,\n  onGestureEvent,\n  onHandlerStateChange,\n  onMeasureHeight,\n}: BottomSheetHandleContainerProps) => {\n  //#region variables\n  const shouldRenderHandle = useMemo(() => _providedHandleComponent !== null, [\n    _providedHandleComponent,\n  ]);\n  //#endregion\n\n  //#region callbacks\n  const handleOnLayout = useCallback(\n    ({\n      nativeEvent: {\n        layout: { height },\n      },\n    }) => {\n      onMeasureHeight(height);\n    },\n    [onMeasureHeight]\n  );\n  //#endregion\n\n  //#region renders\n  const renderHandle = useCallback(() => {\n    if (_providedHandleComponent === null) {\n      return null;\n    }\n    const HandleComponent =\n      _providedHandleComponent === undefined\n        ? BottomSheetHandle\n        : _providedHandleComponent;\n\n    return (\n      <HandleComponent\n        animatedIndex={animatedIndex}\n        animatedPosition={animatedPosition}\n      />\n    );\n  }, [animatedIndex, animatedPosition, _providedHandleComponent]);\n\n  // console.log(\n  //   'BottomSheetHandleContainer',\n  //   'render',\n  //   shouldRenderHandle,\n  //   shouldMeasureHeight\n  // );\n  return shouldRenderHandle ? (\n    <PanGestureHandler\n      simultaneousHandlers={simultaneousHandlers}\n      shouldCancelWhenOutside={false}\n      enabled={enableHandlePanningGesture}\n      onGestureEvent={onGestureEvent}\n      onHandlerStateChange={onHandlerStateChange}\n    >\n      <Animated.View\n        accessible={true}\n        accessibilityRole=\"adjustable\"\n        accessibilityLabel=\"Bottom Sheet handle\"\n        accessibilityHint=\"Drag up or down to extend or minimize the Bottom Sheet\"\n        onLayout={shouldMeasureHeight ? handleOnLayout : undefined}\n      >\n        {renderHandle()}\n      </Animated.View>\n    </PanGestureHandler>\n  ) : null;\n  //#endregion\n};\n\nconst BottomSheetHandleContainer = memo(\n  BottomSheetHandleContainerComponent,\n  isEqual\n);\n\nexport default BottomSheetHandleContainer;\n"]}