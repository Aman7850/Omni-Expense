{"version":3,"sources":["BottomSheetDraggableView.tsx"],"names":["React","useMemo","useRef","memo","isEqual","Animated","event","PanGestureHandler","useBottomSheetInternal","styles","BottomSheetDraggableViewComponent","nativeGestureRef","gestureType","style","children","rest","panGestureRef","enableContentPanningGesture","containerTapGestureRef","handlePanGestureState","handlePanGestureTranslationY","handlePanGestureVelocityY","contentPanGestureState","contentPanGestureTranslationY","contentPanGestureVelocityY","simultaneousHandlers","containerStyle","container","handleGestureEvent","nativeEvent","state","translationY","velocityY","BottomSheetDraggableView"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,MAAzB,EAAiCC,IAAjC,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,IAAmBC,KAAnB,QAAgC,yBAAhC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,sBAAT,QAAuC,aAAvC;AAEA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,MAAMC,iCAAiC,GAAG,CAAC;AACzCC,EAAAA,gBADyC;AAEzCC,EAAAA,WAAW,GAAG,QAF2B;AAGzCC,EAAAA,KAHyC;AAIzCC,EAAAA,QAJyC;AAKzC,KAAGC;AALsC,CAAD,KAML;AACnC;AACA,QAAMC,aAAa,GAAGd,MAAM,CAAoB,IAApB,CAA5B,CAFmC,CAInC;;AACA,QAAM;AACJe,IAAAA,2BADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA,qBAHI;AAIJC,IAAAA,4BAJI;AAKJC,IAAAA,yBALI;AAMJC,IAAAA,sBANI;AAOJC,IAAAA,6BAPI;AAQJC,IAAAA;AARI,MASFhB,sBAAsB,EAT1B,CALmC,CAgBnC;;AACA,QAAMiB,oBAAoB,GAAGxB,OAAO,CAClC,MACEU,gBAAgB,GACZ,CAACO,sBAAD,EAAyBP,gBAAzB,CADY,GAEZO,sBAJ4B,EAKlC,CAACA,sBAAD,EAAyBP,gBAAzB,CALkC,CAApC,CAjBmC,CAyBnC;;AACA,QAAMe,cAAc,GAAGzB,OAAO,CAC5B,MAAOY,KAAK,GAAG,CAACJ,MAAM,CAACkB,SAAR,EAAmBd,KAAnB,CAAH,GAA+BJ,MAAM,CAACkB,SADtB,EAE5B,CAACd,KAAD,CAF4B,CAA9B,CA1BmC,CA+BnC;;AACA,QAAMe,kBAAkB,GAAG3B,OAAO,CAChC,MACEW,WAAW,KAAK,SAAhB,GACIN,KAAK,CAAC,CACJ;AACEuB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAER,sBADI;AAEXS,MAAAA,YAAY,EAAER,6BAFH;AAGXS,MAAAA,SAAS,EAAER;AAHA;AADf,GADI,CAAD,CADT,GAUIlB,KAAK,CAAC,CACJ;AACEuB,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAEX,qBADI;AAEXY,MAAAA,YAAY,EAAEX,4BAFH;AAGXY,MAAAA,SAAS,EAAEX;AAHA;AADf,GADI,CAAD,CAZqB,EAqBhC,CACET,WADF,EAEEU,sBAFF,EAGEC,6BAHF,EAIEC,0BAJF,EAKEL,qBALF,EAMEC,4BANF,EAOEC,yBAPF,CArBgC,CAAlC,CAhCmC,CAgEnC;;AACA,sBACE,oBAAC,iBAAD;AACE,IAAA,GAAG,EAAEL,aADP;AAEE,IAAA,OAAO,EAAEC,2BAFX;AAGE,IAAA,oBAAoB,EAAEQ,oBAHxB;AAIE,IAAA,uBAAuB,EAAE,KAJ3B;AAKE,IAAA,cAAc,EAAEG,kBALlB;AAME,IAAA,oBAAoB,EAAEA;AANxB,kBAQE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEF;AAAtB,KAA0CX,IAA1C,GACGD,QADH,CARF,CADF;AAcD,CArFD;;AAuFA,MAAMmB,wBAAwB,gBAAG9B,IAAI,CACnCO,iCADmC,EAEnCN,OAFmC,CAArC;AAKA,eAAe6B,wBAAf","sourcesContent":["import React, { useMemo, useRef, memo } from 'react';\nimport isEqual from 'lodash.isequal';\nimport Animated, { event } from 'react-native-reanimated';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport { useBottomSheetInternal } from '../../hooks';\nimport type { BottomSheetDraggableViewProps } from './types';\nimport { styles } from './styles';\n\nconst BottomSheetDraggableViewComponent = ({\n  nativeGestureRef,\n  gestureType = 'HANDLE',\n  style,\n  children,\n  ...rest\n}: BottomSheetDraggableViewProps) => {\n  // refs\n  const panGestureRef = useRef<PanGestureHandler>(null);\n\n  // hooks\n  const {\n    enableContentPanningGesture,\n    containerTapGestureRef,\n    handlePanGestureState,\n    handlePanGestureTranslationY,\n    handlePanGestureVelocityY,\n    contentPanGestureState,\n    contentPanGestureTranslationY,\n    contentPanGestureVelocityY,\n  } = useBottomSheetInternal();\n\n  // variables\n  const simultaneousHandlers = useMemo(\n    () =>\n      nativeGestureRef\n        ? [containerTapGestureRef, nativeGestureRef]\n        : containerTapGestureRef,\n    [containerTapGestureRef, nativeGestureRef]\n  );\n\n  // styles\n  const containerStyle = useMemo(\n    () => (style ? [styles.container, style] : styles.container),\n    [style]\n  );\n\n  // callbacks\n  const handleGestureEvent = useMemo(\n    () =>\n      gestureType === 'CONTENT'\n        ? event([\n            {\n              nativeEvent: {\n                state: contentPanGestureState,\n                translationY: contentPanGestureTranslationY,\n                velocityY: contentPanGestureVelocityY,\n              },\n            },\n          ])\n        : event([\n            {\n              nativeEvent: {\n                state: handlePanGestureState,\n                translationY: handlePanGestureTranslationY,\n                velocityY: handlePanGestureVelocityY,\n              },\n            },\n          ]),\n    [\n      gestureType,\n      contentPanGestureState,\n      contentPanGestureTranslationY,\n      contentPanGestureVelocityY,\n      handlePanGestureState,\n      handlePanGestureTranslationY,\n      handlePanGestureVelocityY,\n    ]\n  );\n\n  // effects\n  return (\n    <PanGestureHandler\n      ref={panGestureRef}\n      enabled={enableContentPanningGesture}\n      simultaneousHandlers={simultaneousHandlers}\n      shouldCancelWhenOutside={false}\n      onGestureEvent={handleGestureEvent}\n      onHandlerStateChange={handleGestureEvent}\n    >\n      <Animated.View style={containerStyle} {...rest}>\n        {children}\n      </Animated.View>\n    </PanGestureHandler>\n  );\n};\n\nconst BottomSheetDraggableView = memo(\n  BottomSheetDraggableViewComponent,\n  isEqual\n);\n\nexport default BottomSheetDraggableView;\n"]}