{"version":3,"sources":["FlatList.tsx"],"names":["React","forwardRef","useRef","useImperativeHandle","useEffect","memo","FlatList","RNFlatList","isEqual","Animated","NativeViewGestureHandler","BottomSheetDraggableView","useScrollableInternal","useBottomSheetInternal","styles","AnimatedFlatList","createAnimatedComponent","BottomSheetFlatListComponent","props","ref","focusHook","useFocusHook","rest","nativeGestureRef","scrollableRef","handleOnBeginDragEvent","handleOnContentSizeChange","handleSettingScrollable","enableContentPanningGesture","containerTapGestureRef","decelerationRate","current","getNode","container","BottomSheetFlatList"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,UADF,EAGEC,MAHF,EAIEC,mBAJF,EAKEC,SALF,EAMEC,IANF,QAOO,OAPP;AAQA,SACEC,QAAQ,IAAIC,UADd,QAIO,cAJP;AAKA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,wBAAT,QAAyC,8BAAzC;AACA,OAAOC,wBAAP,MAAqC,6BAArC;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,QAA8D,aAA9D;AAKA,SAASC,MAAT,QAAuB,UAAvB;AAEA,MAAMC,gBAAgB,GAAGN,QAAQ,CAACO,uBAAT,CACvBT,UADuB,CAAzB;AAOA,MAAMU,4BAA4B,gBAAGhB,UAAU,CAC7C,CAACiB,KAAD,EAAuCC,GAAvC,KAAgE;AAC9D;AACA,QAAM;AAAEC,IAAAA,SAAS,EAAEC,YAAY,GAAGjB,SAA5B;AAAuC,OAAGkB;AAA1C,MAAmDJ,KAAzD,CAF8D,CAI9D;;AACA,QAAMK,gBAAgB,GAAGrB,MAAM,CAA2B,IAA3B,CAA/B,CAL8D,CAO9D;;AACA,QAAM;AACJsB,IAAAA,aADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA,yBAHI;AAIJC,IAAAA;AAJI,MAKFf,qBAAqB,CAAC,UAAD,CALzB;AAMA,QAAM;AACJgB,IAAAA,2BADI;AAEJC,IAAAA,sBAFI;AAGJC,IAAAA;AAHI,MAIFjB,sBAAsB,EAJ1B,CAd8D,CAoB9D;AACA;;AACAV,EAAAA,mBAAmB,CAACgB,GAAD,EAAM,MAAMK,aAAa,CAACO,OAAd,CAAuBC,OAAvB,EAAZ,CAAnB;AACAX,EAAAA,YAAY,CAACM,uBAAD,CAAZ,CAvB8D,CAyB9D;;AACA,sBACE,oBAAC,wBAAD;AACE,IAAA,gBAAgB,EAAEJ,gBADpB;AAEE,IAAA,WAAW,EAAC,SAFd;AAGE,IAAA,KAAK,EAAET,MAAM,CAACmB;AAHhB,kBAKE,oBAAC,wBAAD;AACE,IAAA,GAAG,EAAEV,gBADP;AAEE,IAAA,OAAO,EAAEK,2BAFX;AAGE,IAAA,OAAO,EAAEC;AAHX,kBAKE,oBAAC,gBAAD,eACMP,IADN;AAEE;AACA,IAAA,GAAG,EAAEE,aAHP;AAIE,IAAA,cAAc,EAAC,OAJjB;AAKE,IAAA,OAAO,EAAE,KALX;AAME,IAAA,gBAAgB,EAAEM,gBANpB;AAOE,IAAA,mBAAmB,EAAE,EAPvB;AAQE,IAAA,mBAAmB,EAAEJ,yBARvB;AASE,IAAA,iBAAiB,EAAED;AATrB,KALF,CALF,CADF;AAyBD,CApD4C,CAA/C;AAuDA,MAAMS,mBAAmB,gBAAG7B,IAAI,CAACY,4BAAD,EAA+BT,OAA/B,CAAhC;AAEA,eAAgB0B,mBAAhB","sourcesContent":["import React, {\n  forwardRef,\n  Ref,\n  useRef,\n  useImperativeHandle,\n  useEffect,\n  memo,\n} from 'react';\nimport {\n  FlatList as RNFlatList,\n  FlatListProps as RNFlatListProps,\n  ViewStyle,\n} from 'react-native';\nimport isEqual from 'lodash.isequal';\nimport Animated from 'react-native-reanimated';\nimport { NativeViewGestureHandler } from 'react-native-gesture-handler';\nimport BottomSheetDraggableView from '../bottomSheetDraggableView';\nimport { useScrollableInternal, useBottomSheetInternal } from '../../hooks';\nimport type {\n  BottomSheetFlatListProps,\n  BottomSheetFlatListType,\n} from './types';\nimport { styles } from './styles';\n\nconst AnimatedFlatList = Animated.createAnimatedComponent(\n  RNFlatList\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, RNFlatListProps<any>>,\n  any\n>;\n\nconst BottomSheetFlatListComponent = forwardRef(\n  (props: BottomSheetFlatListProps<any>, ref: Ref<RNFlatList>) => {\n    // props\n    const { focusHook: useFocusHook = useEffect, ...rest } = props;\n\n    // refs\n    const nativeGestureRef = useRef<NativeViewGestureHandler>(null);\n\n    // hooks\n    const {\n      scrollableRef,\n      handleOnBeginDragEvent,\n      handleOnContentSizeChange,\n      handleSettingScrollable,\n    } = useScrollableInternal('FlatList');\n    const {\n      enableContentPanningGesture,\n      containerTapGestureRef,\n      decelerationRate,\n    } = useBottomSheetInternal();\n\n    // effects\n    // @ts-ignore\n    useImperativeHandle(ref, () => scrollableRef.current!.getNode());\n    useFocusHook(handleSettingScrollable);\n\n    // render\n    return (\n      <BottomSheetDraggableView\n        nativeGestureRef={nativeGestureRef}\n        gestureType=\"CONTENT\"\n        style={styles.container}\n      >\n        <NativeViewGestureHandler\n          ref={nativeGestureRef}\n          enabled={enableContentPanningGesture}\n          waitFor={containerTapGestureRef}\n        >\n          <AnimatedFlatList\n            {...rest}\n            // @ts-ignore\n            ref={scrollableRef}\n            overScrollMode=\"never\"\n            bounces={false}\n            decelerationRate={decelerationRate}\n            scrollEventThrottle={16}\n            onContentSizeChange={handleOnContentSizeChange}\n            onScrollBeginDrag={handleOnBeginDragEvent}\n          />\n        </NativeViewGestureHandler>\n      </BottomSheetDraggableView>\n    );\n  }\n);\n\nconst BottomSheetFlatList = memo(BottomSheetFlatListComponent, isEqual);\n\nexport default (BottomSheetFlatList as any) as typeof BottomSheetFlatListType;\n"]}