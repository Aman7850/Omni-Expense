{"version":3,"sources":["types.d.ts"],"names":["BottomSheetFlatListType","Component"],"mappings":";;AAyBA,OAAO,MAAMA,uBAAN,SAA+CC,SAA/C,CAEL;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA","sourcesContent":["import type { Component, EffectCallback, DependencyList } from 'react';\nimport type {\n  FlatListProps as RNFlatListProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport type Animated from 'react-native-reanimated';\n\ntype BottomSheetFlatListProps<T> = Omit<\n  RNFlatListProps<T>,\n  | 'overScrollMode'\n  | 'bounces'\n  | 'decelerationRate'\n  | 'onScrollBeginDrag'\n  | 'scrollEventThrottle'\n  | 'style'\n> & {\n  style?: StyleProp<Animated.AnimateStyle<ViewStyle>>;\n  /**\n   * This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with `React Navigation`. You will need to provide `useFocusEffect` from `@react-navigation/native`.\n   * @type (effect: EffectCallback, deps?: DependencyList) => void\n   */\n  focusHook?: (effect: EffectCallback, deps?: DependencyList) => void;\n};\n\nexport class BottomSheetFlatListType<T = any> extends Component<\n  BottomSheetFlatListProps<T>\n> {\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd: (params?: { animated?: boolean | null }) => void;\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that viewPosition 0 places it at the top, 1 at the bottom, and 0.5 centered in the middle.\n   * Cannot scroll to locations outside the render window without specifying the getItemLayout prop.\n   */\n  scrollToIndex: (params: {\n    animated?: boolean | null;\n    index: number;\n    viewOffset?: number;\n    viewPosition?: number;\n  }) => void;\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   * May be janky without `getItemLayout` prop.\n   */\n  scrollToItem: (params: {\n    animated?: boolean | null;\n    item: ItemT;\n    viewPosition?: number;\n  }) => void;\n\n  /**\n   * Scroll to a specific content pixel offset, like a normal `ScrollView`.\n   */\n  scrollToOffset: (params: {\n    animated?: boolean | null;\n    offset: number;\n  }) => void;\n\n  /**\n   * Tells the list an interaction has occured, which should trigger viewability calculations,\n   * e.g. if waitForInteractions is true and the user has not scrolled. This is typically called\n   * by taps on items or by navigation actions.\n   */\n  recordInteraction: () => void;\n\n  /**\n   * Displays the scroll indicators momentarily.\n   */\n  flashScrollIndicators: () => void;\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder: () => JSX.Element | null | undefined;\n\n  /**\n   * Provides a reference to the underlying host component\n   */\n  getNativeScrollRef: () =>\n    | React.RefObject<View>\n    | React.RefObject<ScrollViewComponent>\n    | null\n    | undefined;\n\n  getScrollableNode: () => any;\n\n  // TODO: use `unknown` instead of `any` for Typescript >= 3.0\n  setNativeProps: (props: { [key: string]: any }) => void;\n}\n"]}