{"version":3,"sources":["internal.ts"],"names":["createContext","BottomSheetInternalContext","BottomSheetInternalProvider","Provider"],"mappings":"AAAA,SAASA,aAAT,QAA8C,OAA9C;AAoBA;AACA,OAAO,MAAMC,0BAA0B,gBAAGD,aAAa,EAAhD;AAEP,OAAO,MAAME,2BAA2B,GAAGD,0BAA0B,CAACE,QAA/D","sourcesContent":["import { createContext, Ref, RefObject } from 'react';\nimport type { TapGestureHandler, State } from 'react-native-gesture-handler';\nimport type Animated from 'react-native-reanimated';\nimport type { Scrollable, ScrollableRef } from '../types';\n\nexport type BottomSheetInternalContextType = {\n  enableContentPanningGesture: boolean;\n  containerTapGestureRef: Ref<TapGestureHandler>;\n  contentPanGestureState: Animated.Value<State>;\n  contentPanGestureTranslationY: Animated.Value<number>;\n  contentPanGestureVelocityY: Animated.Value<number>;\n  handlePanGestureState: Animated.Value<State>;\n  handlePanGestureTranslationY: Animated.Value<number>;\n  handlePanGestureVelocityY: Animated.Value<number>;\n  scrollableContentOffsetY: Animated.Value<number>;\n  decelerationRate: Animated.Node<number>;\n  setScrollableRef: (ref: ScrollableRef) => void;\n  removeScrollableRef: (ref: RefObject<Scrollable>) => void;\n};\n\n// @ts-ignore\nexport const BottomSheetInternalContext = createContext<BottomSheetInternalContextType>();\n\nexport const BottomSheetInternalProvider = BottomSheetInternalContext.Provider;\n"]}