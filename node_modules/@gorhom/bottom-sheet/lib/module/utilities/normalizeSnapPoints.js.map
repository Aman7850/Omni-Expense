{"version":3,"sources":["normalizeSnapPoints.ts"],"names":["validateSnapPoint","normalizeSnapPoints","snapPoints","containerHeight","map","snapPoint","Number","split"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qBAAlC;AAEA;;;;AAGA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,UADiC,EAEjCC,eAFiC,KAIjCD,UAAU,CAACE,GAAX,CAAeC,SAAS,IAAI;AAC1BL,EAAAA,iBAAiB,CAACK,SAAD,CAAjB;AACA,SAAO,OAAOA,SAAP,KAAqB,QAArB,GACHA,SADG,GAEFC,MAAM,CAACD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAD,CAAN,GAAkCJ,eAAnC,GAAsD,GAF1D;AAGD,CALD,CAJK","sourcesContent":["import { validateSnapPoint } from './validateSnapPoint';\n\n/**\n * Converts snap points with percentage to fixed numbers.\n */\nexport const normalizeSnapPoints = (\n  snapPoints: ReadonlyArray<number | string>,\n  containerHeight: number\n) =>\n  snapPoints.map(snapPoint => {\n    validateSnapPoint(snapPoint);\n    return typeof snapPoint === 'number'\n      ? snapPoint\n      : (Number(snapPoint.split('%')[0]) * containerHeight) / 100;\n  });\n"]}