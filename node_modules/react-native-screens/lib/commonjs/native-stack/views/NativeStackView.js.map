{"version":3,"sources":["NativeStackView.tsx"],"names":["Screen","ScreenComponent","isAndroid","Platform","OS","didWarn","Container","View","__DEV__","DebugContainer","props","stackPresentation","rest","maybeRenderNestedStack","options","route","renderScene","isHeaderInModal","viewStyles","styles","container","StyleSheet","absoluteFill","NativeStackView","state","navigation","descriptors","key","routes","colors","map","index","render","contentStyle","gestureEnabled","headerShown","replaceAnimation","screenOrientation","stackAnimation","statusBarAnimation","statusBarColor","statusBarHidden","statusBarStyle","statusBarTranslucent","backgroundColor","background","undefined","console","warn","isHeaderInPush","emit","type","data","closing","target","e","dismissCount","nativeEvent","dispatch","StackActions","pop","source","create","flex"],"mappings":"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","sourcesContent":["import {\n  ParamListBase,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n  Route,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\n// @ts-ignore Getting private component\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport {\n  Screen as ScreenComponent,\n  ScreenProps,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport HeaderConfig from './HeaderConfig';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\nconst isAndroid = Platform.OS === 'android';\n\nlet didWarn = isAndroid;\n\nlet Container = View;\n\nif (__DEV__) {\n  const DebugContainer = (\n    props: ViewProps & { stackPresentation: StackPresentationTypes }\n  ) => {\n    const { stackPresentation, ...rest } = props;\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      return (\n        <AppContainer>\n          <View {...rest} />\n        </AppContainer>\n      );\n    }\n    return <View {...rest} />;\n  };\n  // @ts-ignore Wrong props\n  Container = DebugContainer;\n}\n\nconst maybeRenderNestedStack = (\n  options: NativeStackNavigationOptions,\n  route: Route<string>,\n  renderScene: () => JSX.Element,\n  stackPresentation: StackPresentationTypes,\n  isHeaderInModal: boolean,\n  viewStyles: StyleProp<ViewStyle>\n): JSX.Element => {\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderConfig {...options} route={route} />\n          <Container\n            style={viewStyles}\n            // @ts-ignore Wrong props passed to View\n            stackPresentation={stackPresentation}>\n            {renderScene()}\n          </Container>\n        </Screen>\n      </ScreenStack>\n    );\n  }\n  return (\n    <Container\n      style={viewStyles}\n      // @ts-ignore Wrong props passed to View\n      stackPresentation={stackPresentation}>\n      {renderScene()}\n    </Container>\n  );\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props): JSX.Element {\n  const { key, routes } = state;\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {routes.map((route, index) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          contentStyle,\n          gestureEnabled,\n          headerShown,\n          replaceAnimation = 'pop',\n          screenOrientation,\n          stackAnimation,\n          statusBarAnimation,\n          statusBarColor,\n          statusBarHidden,\n          statusBarStyle,\n          statusBarTranslucent,\n        } = options;\n\n        let { stackPresentation = 'push' } = options;\n\n        if (index === 0) {\n          // first screen should always be treated as `push`, it resolves problems with no header animation\n          // for navigator with first screen as `modal` and the next as `push`\n          stackPresentation = 'push';\n        }\n\n        const viewStyles = [\n          styles.container,\n          stackPresentation !== 'transparentModal' &&\n            stackPresentation !== 'containedTransparentModal' && {\n              backgroundColor: colors.background,\n            },\n          contentStyle,\n        ];\n\n        if (\n          !didWarn &&\n          stackPresentation !== 'push' &&\n          headerShown !== undefined\n        ) {\n          didWarn = true;\n          console.warn(\n            'Be aware that changing the visibility of header in modal on iOS will result in resetting the state of the screen.'\n          );\n        }\n\n        const isHeaderInModal = isAndroid\n          ? false\n          : stackPresentation !== 'push' && headerShown === true;\n        const isHeaderInPush = isAndroid\n          ? headerShown\n          : stackPresentation === 'push' && headerShown !== false;\n\n        return (\n          <Screen\n            key={route.key}\n            enabled\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={isAndroid ? false : gestureEnabled}\n            replaceAnimation={replaceAnimation}\n            screenOrientation={screenOrientation}\n            stackAnimation={stackAnimation}\n            stackPresentation={stackPresentation}\n            statusBarAnimation={statusBarAnimation}\n            statusBarColor={statusBarColor}\n            statusBarHidden={statusBarHidden}\n            statusBarStyle={statusBarStyle}\n            statusBarTranslucent={statusBarTranslucent}\n            onWillAppear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={(e) => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              const dismissCount =\n                e.nativeEvent.dismissCount > 0 ? e.nativeEvent.dismissCount : 1;\n\n              navigation.dispatch({\n                ...StackActions.pop(dismissCount),\n                source: route.key,\n                target: key,\n              });\n            }}>\n            <HeaderConfig\n              {...options}\n              route={route}\n              headerShown={isHeaderInPush}\n            />\n            {maybeRenderNestedStack(\n              options,\n              route,\n              renderScene,\n              stackPresentation,\n              isHeaderInModal,\n              viewStyles\n            )}\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}