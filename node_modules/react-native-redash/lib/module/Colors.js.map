{"version":3,"sources":["Colors.ts"],"names":["Animated","processColor","mix","clamp","fract","add","multiply","abs","round","interpolate","sub","proc","color","Extrapolate","greaterThan","cond","opacity","c","red","green","blue","hsv2rgb","h","s","v","K","x","y","z","w","p","rgb","r","g","b","hsv2color","colorForBackground","L","rgbToHsv","ma","Math","max","mi","min","d","interpolateColorsHSV","animationValue","inputRange","colors","colorsAsHSV","map","outputRange","extrapolate","CLAMP","interpolateColorsRGB","a","interpolateColor","value","config","colorSpace","mixColor","color1","color2"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { processColor } from \"react-native\";\n\nimport { mix } from \"./Animations\";\nimport { clamp, fract } from \"./Math\";\n\nconst {\n  add,\n  multiply,\n  abs,\n  round,\n  interpolate,\n  sub,\n  proc,\n  color,\n  Extrapolate,\n  greaterThan,\n  cond,\n} = Animated;\n\ntype Color = Animated.Adaptable<string> | Animated.Adaptable<number>;\n\nexport const opacity = (c: number) => ((c >> 24) & 255) / 255;\nexport const red = (c: number) => (c >> 16) & 255;\nexport const green = (c: number) => (c >> 8) & 255;\nexport const blue = (c: number) => c & 255;\n\nexport const hsv2rgb = (\n  h: Animated.Adaptable<number>,\n  s: Animated.Adaptable<number>,\n  v: Animated.Adaptable<number>\n) => {\n  // vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  const K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3,\n  };\n  // vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  const p = {\n    x: abs(sub(multiply(fract(add(h, K.x)), 6), K.w)),\n    y: abs(sub(multiply(fract(add(h, K.y)), 6), K.w)),\n    z: abs(sub(multiply(fract(add(h, K.z)), 6), K.w)),\n  };\n  // return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  const rgb = {\n    x: multiply(v, mix(s, K.x, clamp(sub(p.x, K.x), 0, 1))),\n    y: multiply(v, mix(s, K.x, clamp(sub(p.y, K.x), 0, 1))),\n    z: multiply(v, mix(s, K.x, clamp(sub(p.z, K.x), 0, 1))),\n  };\n  return {\n    r: round(multiply(rgb.x, 255)),\n    g: round(multiply(rgb.y, 255)),\n    b: round(multiply(rgb.z, 255)),\n  };\n};\n\nexport const hsv2color = proc(\n  (\n    h: Animated.Adaptable<number>,\n    s: Animated.Adaptable<number>,\n    v: Animated.Adaptable<number>\n  ) => {\n    const { r, g, b } = hsv2rgb(h, s, v);\n    return color(r, g, b);\n  }\n);\n\nexport const colorForBackground = proc(\n  (\n    r: Animated.Adaptable<number>,\n    g: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>\n  ) => {\n    const L = add(multiply(0.299, r), multiply(0.587, g), multiply(0.114, b));\n    return cond(greaterThan(L, 186), color(0, 0, 0), color(255, 255, 255));\n  }\n);\n\nconst rgbToHsv = (c: number) => {\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h, s, v };\n};\n\nconst interpolateColorsHSV = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: readonly Animated.Adaptable<number>[],\n  colors: number[]\n): Animated.Node<number> => {\n  const colorsAsHSV = colors.map((c) => rgbToHsv(c));\n  const h = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.h),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const s = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.s),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const v = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map((c) => c.v),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  return hsv2color(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: readonly Animated.Adaptable<number>[],\n  colors: number[]\n) => {\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => red(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => green(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map((c) => blue(c)),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map((c) => opacity(c)),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n};\n\ninterface ColorInterpolationConfig {\n  inputRange: readonly Animated.Adaptable<number>[];\n  outputRange: Color[];\n}\n\nexport const interpolateColor = (\n  value: Animated.Adaptable<number>,\n  config: ColorInterpolationConfig,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n): Animated.Node<number> => {\n  const { inputRange } = config;\n  const outputRange = config.outputRange.map((c) =>\n    typeof c === \"number\" ? c : processColor(c)\n  );\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\n\nexport const mixColor = (\n  value: Animated.Adaptable<number>,\n  color1: Color,\n  color2: Color,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n) =>\n  interpolateColor(\n    value,\n    {\n      inputRange: [0, 1],\n      outputRange: [color1, color2],\n    },\n    colorSpace\n  );\n"]}